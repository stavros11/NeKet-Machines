CHECK - TESTED
virtual int Npar() const = 0;

CHECK - TESTED
virtual VectorType GetParameters() = 0;

CHECK
virtual void SetParameters(const VectorType &pars) = 0;

CHECK - TESTED
virtual void InitRandomPars(int seed, double sigma) = 0;

CHECK - TESTED
virtual int Nvisible() const = 0;

CHECK - TESTED
virtual T LogVal(const Eigen::VectorXd &v) = 0;

CHECK - TESTED
virtual T LogVal(const Eigen::VectorXd &v, const LookupType &lt) = 0;

LogVals AGREE!

CHECK - TESTED
virtual void InitLookup(const Eigen::VectorXd &v, LookupType &lt) = 0;


virtual void UpdateLookup(const Eigen::VectorXd &v,
                            const std::vector<int> &tochange,
                            const std::vector<double> &newconf,
                            LookupType &lt) = 0;

CHECK - TESTED
virtual VectorType LogValDiff(
      const Eigen::VectorXd &v, const std::vector<std::vector<int>> &tochange,
      const std::vector<std::vector<double>> &newconf) = 0;

CHECK - TESTED
virtual T LogValDiff(const Eigen::VectorXd &v, const std::vector<int> &toflip,
                       const std::vector<double> &newconf,
                       const LookupType &lt) = 0;

LogValDiffs AGREE!


CHECK
virtual VectorType DerLog(const Eigen::VectorXd &v) = 0;



  virtual void to_json(json &j) const = 0;
  virtual void from_json(const json &j) = 0;

  void Save(std::string filename) const {
    std::ofstream filewf(filename);
    Save(filewf);
    filewf.close();
  }

  void Save(std::ofstream& stream) const {
    json j;
    to_json(j);
    stream << j << std::endl;
  }

  virtual ~AbstractMachine() {}
